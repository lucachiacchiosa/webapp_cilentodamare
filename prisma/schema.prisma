generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String    @id @default(cuid())
  email     String    @unique
  password  String?
  name      String?
  role      Role      @default(CUSTOMER)
  createdAt DateTime  @default(now())
  accounts  Account[]
  bookings  Booking[]
  operator  Operator?
  sessions  Session[]
}

model Operator {
  id          String       @id @default(cuid())
  userId      String       @unique
  displayName String
  description String?
  location    String
  tier        Tier         @default(BASIC)
  createdAt   DateTime     @default(now())
  experiences Experience[]
  user        User         @relation(fields: [userId], references: [id])
}

model Experience {
  id              String            @id @default(cuid())
  operatorId      String
  title           String
  slug            String            @unique
  description     String
  category        Category
  location        String
  priceCents      Int
  durationMin     Int?
  minGuests       Int               @default(1)
  maxGuests       Int?
  cancelPolicy    String?
  requirements    String?
  status          ExperienceStatus  @default(ACTIVE)
  accessibility   String?
  images          String[]
  active          Boolean           @default(true)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @default(now()) @updatedAt
  Booking         Booking[]
  operator        Operator          @relation(fields: [operatorId], references: [id])
  DeletionRequest DeletionRequest[]
}

model Booking {
  id            String        @id @default(cuid())
  experienceId  String
  userId        String
  date          DateTime
  guests        Int
  amountCents   Int
  status        BookingStatus @default(PENDING)
  stripeSession String?
  createdAt     DateTime      @default(now())
  experience    Experience    @relation(fields: [experienceId], references: [id])
  user          User          @relation(fields: [userId], references: [id])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Attraction {
  id          String   @id
  name        String
  slug        String   @unique
  location    String
  description String
  images      String[]
  createdAt   DateTime @default(now())
}

model DeletionRequest {
  id                String                @id @default(cuid())
  experienceId      String
  experience        Experience            @relation(fields: [experienceId], references: [id], onDelete: Cascade)
  reason            String?
  status            DeletionRequestStatus @default(PENDING)
  requestedByUserId String?
  decidedAt         DateTime?
  createdAt         DateTime              @default(now())
}

enum Role {
  ADMIN
  OPERATOR
  CUSTOMER
}

enum Tier {
  BASIC
  SILVER
  GOLD
  PLATINUM
}

enum Category {
  GASTRONOMIA
  MARE
  TREKKING
  CULTURA
  SPORT
  WELLNESS
}

enum BookingStatus {
  PENDING
  PAID
  CANCELED
}

enum ExperienceStatus {
  ACTIVE
  SUSPENDED
}

enum DeletionRequestStatus {
  PENDING
  APPROVED
  REJECTED
}
