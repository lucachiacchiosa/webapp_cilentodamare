generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

//
// ENUMS
//
enum Role {
  ADMIN
  OPERATOR
  CUSTOMER
}

enum Tier {
  BASIC
  SILVER
  GOLD
  PLATINUM
}

enum Category {
  GASTRONOMIA
  MARE
  TREKKING
  CULTURA
  SPORT
  WELLNESS
}

enum BookingStatus {
  PENDING
  PAID
  CANCELED
}

//
// MODELS
//
model User {
  id        String     @id @default(cuid())
  email     String     @unique
  password  String?
  name      String?
  role      Role       @default(CUSTOMER)
  bookings  Booking[]
  operator  Operator?
  createdAt DateTime   @default(now())

  // next-auth relations
  accounts  Account[]
  sessions  Session[]
}

model Operator {
  id          String       @id @default(cuid())
  userId      String       @unique
  user        User         @relation(fields: [userId], references: [id])
  displayName String
  description String?
  location    String?
  tier        Tier         @default(BASIC)
  experiences Experience[]
  createdAt   DateTime     @default(now())
}

model Experience {
  id          String      @id @default(cuid())
  operatorId  String
  operator    Operator    @relation(fields: [operatorId], references: [id])
  title       String
  slug        String      @unique
  description String
  category    Category
  location    String
  priceCents  Int
  durationMin Int?
  minGuests   Int?
  maxGuests   Int?
  images      String[]
  active      Boolean     @default(true)
  createdAt   DateTime    @default(now())
  bookings    Booking[]
}

model Booking {
  id           String        @id @default(cuid())
  userId       String
  user         User          @relation(fields: [userId], references: [id])
  experienceId String
  experience   Experience    @relation(fields: [experienceId], references: [id])
  status       BookingStatus @default(PENDING)
  date         DateTime
  guests       Int
  totalCents   Int
  createdAt    DateTime      @default(now())
}

//
// NEXT-AUTH MODELS
//
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@id([identifier, token])
}
